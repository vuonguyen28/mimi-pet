const express = require('express');
const router = express.Router();
const User = require('../models/userprofileModel');
const Profile = require('../models/profileModel');
const Order = require('../models/orderModel');
const OrderDetail = require('../models/orderDetailModel');
const Product = require('../models/productModel');
const variants = require('../models/variantsModel');
const Voucher = require('../models/voucherModel');




// L·∫•y th√¥ng tin user + profile theo username
router.get('/username/:username', async (req, res) => {
  try {
    const { username } = req.params;
    // T√¨m user theo username
    const user = await User.findOne({ username }).select('-password -role');
    if (!user) return res.status(404).json({ message: 'User kh√¥ng t·ªìn t·∫°i' });

    // T√¨m profile theo username
    const profile = await Profile.findOne({ username }) || null;
    res.json({ ...user.toObject(), profile });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server' });
  }
});

// T·∫°o profile m·ªõi cho username (ch·ªâ khi ch∆∞a c√≥ profile cho username n√†y)
router.post('/:username', async (req, res) => {
  try {
    const { username } = req.params;
    const { phone, gender, birthDate, addresses } = req.body;

    if (!username || !username.trim()) {
      return res.status(400).json({ message: 'Thi·∫øu username h·ª£p l·ªá' });
    }

    // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
    const user = await User.findOne({ username });
    if (!user) return res.status(404).json({ message: 'User kh√¥ng t·ªìn t·∫°i' });

    // Ki·ªÉm tra profile ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingProfile = await Profile.findOne({ username });
    if (existingProfile) return res.status(400).json({ message: 'Profile ƒë√£ t·ªìn t·∫°i cho username n√†y' });

    // T·∫°o m·ªõi profile
    const profile = new Profile({ username, phone, gender, birthDate, addresses });
    await profile.save();
    res.status(201).json(profile);
  } catch (error) {
    if (error.code === 11000) {
      return res.status(400).json({ message: 'Username ƒë√£ t·ªìn t·∫°i (duplicate key)' });
    }
    res.status(500).json({ message: 'L·ªói server khi t·∫°o profile', error: error.message });
  }
});

// C·∫≠p nh·∫≠t profile (ch·ªâ khi ƒë√£ t·ªìn t·∫°i)
router.put('/:username', async (req, res) => {
  try {
    const { username } = req.params;
    const { phone, gender, birthDate, addresses, firstName, lastName } = req.body;

    const user = await User.findOne({ username });
    if (!user) return res.status(404).json({ message: 'User kh√¥ng t·ªìn t·∫°i' });

    // C·∫≠p nh·∫≠t h·ªç t√™n n·∫øu c√≥
    if (firstName) user.firstName = firstName;
    if (lastName) user.lastName = lastName;
    await user.save();

    // C·∫≠p nh·∫≠t profile
    const profile = await Profile.findOne({ username });
    if (!profile) return res.status(404).json({ message: 'Profile ch∆∞a t·ªìn t·∫°i' });

    profile.phone = phone;
    profile.gender = gender;
    profile.birthDate = birthDate;
    profile.addresses = addresses;

    await profile.save();

    res.json({ ...user.toObject(), profile: profile.toObject() });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server khi c·∫≠p nh·∫≠t profile', error: error.message });
  }
});


// L·∫•y ƒë∆°n h√†ng c√≥ shippingInfo.name tr√πng username
router.get('/by-username-ordername/:username', async (req, res) => {
  const { username } = req.params;
  if (!username || !username.trim()) {
    return res.status(400).json({ error: 'Thi·∫øu ho·∫∑c sai username' });
  }

  try {
    const orders = await Order.find({ 'shippingInfo.name': username }).sort({ createdAt: -1 });

    const result = await Promise.all(
      orders.map(async (order) => {
        const orderId = order.orderId || order._id.toString();
        const details = await OrderDetail.find({ orderId });

        const products = await Promise.all(
          details.map(async (d) => {
            let image = '';
            try {
              if (d.productId) {
                const product = await Product.findById(d.productId).select('images');
                if (product?.images?.length > 0) {
                  image = product.images[0];
                }
              }
            } catch (e) {
              console.error(`L·ªói khi l·∫•y ·∫£nh cho s·∫£n ph·∫©m ${d.productId}:`, e);
            }

            return {
              productId: d.productId?.toString() || '',
              productName: d.productName || '',
              quantity: d.quantity || 0,
              variant: d.variant || '',
              price: d.price || 0,
              image,
            };
          })
        );

        return { ...order.toObject(), products };
      })
    );

    return res.json(result);
  } catch (error) {
    console.error('L·ªói khi l·∫•y ƒë∆°n h√†ng:', error);
    return res.status(500).json({ error: 'L·ªói server khi l·∫•y ƒë∆°n h√†ng' });
  }
});

// C·∫≠p nh·∫≠t tr·∫°ng th√°i + tr·ª´ kho / tƒÉng sold
router.put('/update-status/:orderId', async (req, res) => {
  const { orderId } = req.params;
  if (!orderId) return res.status(400).json({ error: 'Thi·∫øu orderId' });

  try {
    const order = await Order.findById(orderId);
    if (!order) return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });

    const currentStatus = order.orderStatus;
    const paymentStatus = order.paymentStatus;

    if (currentStatus === 'waiting') {
      order.orderStatus = 'cancelled';
    } else if (currentStatus === 'shipping') {
      order.orderStatus = 'delivered';

      if (paymentStatus !== 'paid') {
        order.paymentStatus = 'paid';
      }

      // üîπ C·∫≠p nh·∫≠t kho & sold
      const orderDetails = await OrderDetail.find({
        $or: [
          { orderId: order.orderId },
          { orderId: order._id.toString() }
        ]
      });

      for (const detail of orderDetails) {
        if (!detail.productId) continue;

        let productObjectId;
        try {
          productObjectId = typeof detail.productId === 'string'
            ? mongoose.Types.ObjectId(detail.productId)
            : detail.productId;
        } catch (e) {
          console.warn(`‚ùå Kh√¥ng th·ªÉ √©p ki·ªÉu productId: ${detail.productId}`);
          continue;
        }

        const updatedProduct = await Product.findByIdAndUpdate(
          productObjectId,
          { $inc: { sold: detail.quantity } },
          { new: true }
        );

        if (!updatedProduct) {
          console.warn(`‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID ${detail.productId}`);
        } else {
          console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t sold cho product: ${updatedProduct._id}`);
        }

        const updatedVariant = await variants.findOneAndUpdate(
          {
            productId: productObjectId,
            size: detail.variant
          },
          { $inc: { quantity: -detail.quantity } },
          { new: true }
        );

        if (!updatedVariant) {
          console.warn(`‚ùå Kh√¥ng t√¨m th·∫•y variant cho productId ${detail.productId} v√† size ${detail.variant}`);
        } else {
          console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t variant:`, updatedVariant);
        }
      }

      // ‚úÖ Tr·ª´ l∆∞·ª£t s·ª≠ d·ª•ng voucher (n·∫øu c√≥ coupon)
      if (order.coupon) {
        const voucher = await Voucher.findOne({ discountCode: order.coupon });

        if (voucher) {
          if (voucher.usageLimit > 0) {
            voucher.usageLimit -= 1;
            voucher.used += 1;
            await voucher.save();
            console.log(`‚úÖ ƒê√£ tr·ª´ l∆∞·ª£t s·ª≠ d·ª•ng voucher ${voucher.discountCode}`);
          } else {
            console.warn(`‚ùå Voucher ${voucher.discountCode} kh√¥ng c√≤n l∆∞·ª£t s·ª≠ d·ª•ng`);
          }
        } else {
          console.warn(`‚ùå Kh√¥ng t√¨m th·∫•y voucher v·ªõi m√£: ${order.coupon}`);
        }
      }
    }

    await order.save();
    res.json({ message: '‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng', order });
  } catch (error) {
    console.error('‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:', error);
    res.status(500).json({ error: 'L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i' });
  }
});




module.exports = router;